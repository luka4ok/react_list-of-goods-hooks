{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT","sortedBy","setSortedBy","isReversed","setIsReversed","visibleGoods","useMemo","goods","preparedGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getPreparedGoods","className","type","cn","onClick","reversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,WAAAA,E,gBAAAA,E,qBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAAmBH,EAASI,SAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAAeC,mBAAQ,kBA9B/B,SACEC,EADF,GAGG,IADCN,EACF,EADEA,SACF,IADYE,kBACZ,SACMK,EAAa,YAAOD,GAmB1B,OAjBIN,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXZ,GACFK,EAAcQ,UAGTR,EAO4BS,CAAiBpB,EAAiB,CACnEI,WACAE,iBACE,CAACF,EAAUE,IAOf,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,WAAY,CAClC,WAAYnB,IAAaL,EAASgB,WAEpCS,QAAS,kBAAMnB,EAAYN,EAASgB,WALtC,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYnB,IAAaL,EAASkB,SAEpCO,QAAS,kBAAMnB,EAAYN,EAASkB,SALtC,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAajB,IAEfkB,QAAS,kBAAMjB,GAAc,SAACkB,GAAD,OAAeA,MAL9C,qBAUCrB,GAAYE,EACX,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAzCjBjB,GAAc,QACdF,EAAYN,EAASI,UAqCf,mBAQA,MAIJ,6BACE,6BACGK,EAAakB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCnHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.547a9961.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  DEFAULT = '',\n  LENGTH = 'Length',\n  ALPHABET = 'Alphabet',\n}\n\ninterface SortingParams {\n  sortedBy: SortType;\n  isReversed: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortedBy, isReversed = false }: SortingParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortedBy) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortedBy) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortedBy, setSortedBy] = useState<SortType>(SortType.DEFAULT);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const visibleGoods = useMemo(() => getPreparedGoods(goodsFromServer, {\n    sortedBy,\n    isReversed,\n  }), [sortedBy, isReversed]);\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortedBy(SortType.DEFAULT);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info ', {\n            'is-light': sortedBy !== SortType.ALPHABET,\n          })}\n          onClick={() => setSortedBy(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortedBy !== SortType.LENGTH,\n          })}\n          onClick={() => setSortedBy(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed((reversed) => !reversed)}\n        >\n          Reverse\n        </button>\n\n        {sortedBy || isReversed ? (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => reset()}\n          >\n            Reset\n          </button>\n        ) : (\n          ''\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map((good) => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}